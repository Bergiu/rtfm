These variables are automatically provided to any processor:

## Constants
These can't be changed, it would be a no-op to do so.

# Primitives

Primitives are the most basic of values in the language.

[royal]int[] false = 0
[royal]int[] true = 1
[royal]Object[] null = null

# Processor
[royal]Building[] @this
	The processor executing the instruction.

[royal]double[] @thisx
[royal]double[] @thisy
	Shortcuts for [stat]sensor[]. The x and y coordinates of the processor.

[royal]int[] @ipt
	How many instructions are executed every tick on the current processor.
	Probably useful for a clock.

# Links
[royal]int[] @links
	The number of links established between the processor and other blocks.
	This is represented visually by a blue diamond around a block, similar to how you would link power nodes together.
	You can get the Building object for one using [stat]getlink[].
	Example code to iterate over them (run through them) all:
		[stat]set[] [royal]i[] [coral]0
		[stat]getlink[] [royal]block i
		[stat]jump[] [coral]1 lessThan[] [royal]i @links

[royal]Building[] [pink]suffix<n>
	Constant that refers to the [pink]n[]th connected [pink]suffix[] building.
	Suffix is the last part of a block's internal name.
	[pink]N[] starts with 1 and currently to be changed you must replace the processor.
	[pink]N[] increases with the block's suffix, not for the block specifically.
	Example:
		ripple -> ripple1
		[red]item-[]source -> source1
		second [red]routorio-[]holorouter -> holorouter2
		[red]routorio-arc-[]router -> router1

# Sensable properties

These properties are "sensable" because they can be used to "sense" and represent different objects and properties.
Examples are a Unit, Building, their power count, their x or y coordinate, or config.
Some are returned through instructions like [stat]sensor[] or [stat]radar[].
Some can be used directly sort of like a name, such as an Item, Liquid or Unit.

[royal]Item[] @[pink]item-internal-name
	Refers to a specific item, such as @[pink]copper[].
	See [stat]Items.java[] and any mods for valid internal names.
	You can also find them in the visual editor, in the left tab of [stat]sensor[]'s picker.
	[stat](first argument to constructor, modname-<filename without .json>)

[royal]Liquid[] @[pink]liquid-internal-name
	Refers to a specific liquid, such as @[pink]slag[].
	See [stat]Liquids.java[] and any mods for valid internal names.
	You can also find them in the visual editor, in the middle tab of [stat]sensor[]'s picker.
	[stat](first argument to constructor, modname-<filename without .json>)

[royal]Block[] @[pink]block-internal-name
	Refers to a specific type of block, in the same way [royal]Building[] does, but without the number. (e.g. @[pink]vault[])
	These are used by [stat]ucontrol[] [violet]build[] and [red]have no picker[], you need to know them yourself.
	See [stat]Blocks.java[] and any mods for valid internal names.

[royal]UnitType[] @[pink]unit-internal-name
	Refers to a specific type of unit, such as @[pink]horizon[].
	These are used by [stat]ubind[] and have a picker.
	See [stat]UnitTypes.java[] and any mods for valid internal names.

[royal]String[] @[pink]others
	Used for accessing various properties of a [royal]Building[], such as its x coordinate (@[pink]x[]), or item capacity (@[pink]itemCapacity[]).
	Too many to list here, see the right tab of [stat]sensor[]'s picker.

# Misc

[royal]Unit[] @unit = null
	A variable that represents the current bound unit. (Think of it like a register in ASM)
	Only set by [royal]ubind[].
	Since there is only one of this in the processor, this only allows for one unit to be bound at a time.

[royal]double[] @time
	Represents the current UNIX timestamp in milliseconds.

## Variables
These can be set for certain functionality.

# Processor
[royal]int[] @counter
	Equivalent to %IP in x86. (Instruction Pointer)
	This represents the line to read the next instruction from.
	You can set this to jump to another line.
	Example for call and ret (lines that start with # are comments):
		# Save where we will leave off after the jump, by setting a variable retaddr to @counter + 1.
		[stat]op[] [pink]add[] [royal]retaddr @counter[] [coral]1
		# Set @counter to the line number of a function called "coolfunc", effectively calling it. The processor will jump to that line next.
		[stat]set[] [royal]@counter .coolfunc
		...
		# In coolfunc, return to the line right after where we called the code from and continue processing instructions from there.
		[stat]set[] [royal]@counter retaddr
