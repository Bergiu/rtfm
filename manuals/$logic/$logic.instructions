## Doc Syntax
Instructions are described as follows:
[royal]instruction name[] [stat]Type[] arg, ...
Arguments inherit the previous type if not specified.

Type may be:
	bool: true or false, 1 or 0
	int: number with no decimal
	double: number with optional decimal
	Unit: a unit in the world
	Building: a block in the world
	String: text enclosed in quotes ([coral]""[])
	Val: A variable name used as a generic or to hold a value.
	Sensable: An Item, Liquid or Building property.
		A full list is shown when the pencil button is pressed.
	Target: Trait to filter a unit or block by
	Op: Mathematical operation, unary or binary
	etc.

# Colours
The following colours have special meaning:
	[royal][[royal][]: Instruction name
	[violet][[violet][]: Sub-instruction name
	[coral][[coral][]: Hard-coded value or instruction parameter.
	[stat][[stat][]: Variable name, the variable it refers to holds the real value.
		In instruction definitions, not examples, it signifies a param type.

## Basics
Values may be passed directly or from a variable, unless specified otherwise.
The following are equivalent:
	[royal]set[] [stat]egg[] [coral]"egg yum yum"[]
	[royal]print[] [stat]egg[]
and
	[royal]print[] [coral]"egg yum yum"[]

## Writing

Mindustry logic can be written in a text editor like assembly, or graphically in a logic block.

Examples of both:
[royal]draw[] [violet]clear[] [coral]0 0 0 0 0 0[]
[royal]drawflush[] [stat]display1[]
{rtfm-instruction-example}
(In this case the draw instruction has 6 values, [coral]clear[] only uses 3 so only 3 are shown)

# Links
Blocks linked to the processor can be gotten from
[royal]getlink[] [royal]block[] [coral]0
or
[royal]<blockname>1
Where the latter is like Lua, it is 1-indexed.
Linked blocks show their associated variable when the processor is selected.

## Instructions

# Special block operations
These instructions are for memory cells, displays and message blocks respectively.

[royal]write[] [stat]double[] value, [stat]Building[] cell, [stat]int[] address
	Sets the [stat]double[] at [coral]address[] of [coral]cell[] to [coral]value[].
	Does nothing on blocks other than memory cells.

[royal]read[] [stat]Var[] store, [stat]Building[] cell, [stat]int[] address
	Reads the [stat]double[] from [coral]address[] of [coral]cell[] into variable [coral]store[].
	Does nothing on blocks other than memory cells.

[royal]draw
	These sub-instructions queue operations that are run with [royal]drawflush[].

	[violet]clear[] [stat]int[] r, g, b
		Fills the display with a colour.

	[violet]color[] [stat]int[] r, g, b
		Sets the colour for future operations.

	[violet]stroke[] [stat]int[] width
		Sets line width for future [violet]*line[] operations

	[violet]line[] [stat]int[] x1, y1, x2, y2
		Draw a line from one point to another.

	[violet]rect[] [stat]int[] x, y, w, h
		Draw a rectangle with bottom left corner [stat]x, y[] and top right corner [stat]x + w, y + h[].

	[violet]rectLine[] [stat]int[] x, y, w, h
		Like [violet]rect[] but with lines.

	[violet]poly[] [stat]int[] x, y, sides, [stat]double[] radius, rotation
		Draw an equilateral polygon centered on a point.
		A circle may be drawn with many sides.

	[violet]polyLine[] [stat]int[] x, y, sides, [stat] double[] radius, position
		Like [violet]poly[] but with lines.

	[violet]triangle[] [stat]int[] x1, y1, x2, y2, x3, y3
		Draw a triangle with 3 points.
		Has no [violet]line equivalent.

[royal]drawflush[] [stat]Building[] display
	Flush all pending [royal]draw[] operations to a display.
	They are drawn on the next tick.

[royal]print[] [stat]String[] text
	Add [stat]text[] to the processor's print buffer.

[royal]printflush[] [stat]Building[] msgblock
	Set [stat]msgblock[]'s text to the processor's print buffer.

# General operations
These instructions are used by almost every program.

[royal]getlink[] [stat]Var[] store, [stat]int[] index
	Gets linked tile #[coral]index[] and puts it in [coral]store[].
	Can be used for things like iterating over all linked blocks.
		Can be iterated over C string style or array style with [royal]@links[].

[royal]control
	[violet]enabled[] [stat]Building[] target, [stat]bool[] enabled
		Enable a block like a conveyor.
		Does not work for things like Walls, Switches, etc.

	[violet]shoot[] [stat]Building[] turret, [stat]double[] x, y, [stat]bool[] shoot
		Tell the turret to fire at an absolute position in World Units.
		If [stat]shoot[] is false it will cease firing.
		(1 tile = 8 WU)

[royal]radar[] [stat]Building[] turret, [stat]TargetType[] prop1, prop2, prop3, [stat]bool[] order, [stat]Val[] output
	Radar gets a list of units targetable by a [coral]turret[].
	[coral]Prop1-3[] are different properties that a target must have to be valid.
	For example, [coral]player any any[] will match any player target,
		but [coral]player block any[] will only match player blocks
		and [coral]any any any[] matches any block or unit at all.
	(Player refers to this turret's team)
	If order is false, the list of targets is in reverse order.

	The next target is put in [coral]output[].
	The target can be a [stat]Unit[] or [stat]Building[], internally it is [stat]Healthc[].

[royal]sensor[] [stat]Val[] store, [stat]Sensable[] sense, [stat]Building[] block
	Extract information [stat]sense[] from [stat]block[], saved to [stat]store[].
	For example, to get the amount of graphite in a block:
		[royal]sensor[] [stat] graphcount @graphite block
	Use the number in [stat]graphcount[] afterwards.

[royal]set[] [stat]Val[] varname, [stat]Val[] value
	Set a variable with name [stat]varname[] to [stat]value[].
	For example, to copy [stat]@this[] into [stat]block[]:
		[royal]set[] [stat]block @this

[royal]op[] [stat]Op[] op, [stat]Val[] result, [stat]double[] a, [[b]
	Set [stat]result[] to the output of a mathematical operation.
	if [coral]b[] is not set then it is ignored for a unary operation.

# Control flow

[royal]end
	Shorthand for [royal]jump[] [coral]0 always[].

[royal]jump[] [coral]int[] inst, [stat]Comp[] comp, [stat]Val[] a, b
	Jumps to [coral]inst[] if [coral]a comp b[] is true.
	The instruction index does not change in the graphical editor.
	[royal]jump[] [coral]inst always[] is the jump equivalent to [royal]set[] [stat]@counter[] [coral]inst[].

# Units
These instructions work on the unit register, rather than individual units like [royal]control[] would.
Think of them like GPU shader programs, you have to think generically without much specialization.
You cannot narrow down instructions to certain units.

[royal]ubind[] [stat]UnitType[] type
	Loads all units of a certain type into the units cache.
	This cache is read from into [stat]@unit[] which other instructions use.
	Won't work across teams.
	[coral]Currently has no range limit.

	Examples of unit types:
		[stat]@mono
		[stat]@routorio-sexy-router
		[stat]@poly

[royal]ucontrol
	Act on [stat]@unit[].

	[violet]stop
		Stop moving, i.e. move to the current position.

	[violet]move[] [stat]double[] x, y
		Move to a position on the map.

	[violet]approach[] [stat]double[] x, y, radius
		Like [violet]move[], but will stop moving if within [coral]radius[] world units of the center.
		Causes units to spread out around a position.
		{rtfm-ucontrol-approach}

	[violet]boost[] [stat]boolean[] enable
		Enable or disable boosting for mechs.

	[violet]pathfind
		Return control of the unit to AI. [red](?)

	[violet]target[] [stat]double[] x, y, [stat]boolean[] shoot
		[royal]control[] [violet]shoot[] but for units.

	[violet]targetp[] [stat]Healthc[] target, [stat]boolean[] shoot
		Shortcut for [violet]target[], gets the position of a block or unit.

	[violet]itemDrop[] [stat]Building[] to, [stat]int[] amount
		Drops at most [coral]amount[] items into a building.

	[violet]itemTake[] [stat]Building[] from, [stat]Item[] item, [stat]int[] amount
		Takes at most [coral]amount[] of an item from a building.

	[violet]mine[] [stat]double[]x, y
		Mine the ore at the position.
		Does nothing if it's not minable.

	[violet]flag[] [stat]double[] flag
		Sets the unit's flag to a number.
		Read it back with [royal]sensor[] [stat]flag @unit flagVar[]

	[violet]build[] [stat]double[] x, y, [stat]Block[] block, [stat]0 <= int < 4[] rotation
		Build a block at a certain position in world units, not tiles.
		Block is in the form [stat]@[][pink]<id>[].
		Examples:
			[stat]@router
			[stat]@routorio-double-router
			[stat]@cryofluid-mixer

	[violet]getBlock[] [stat]double[] x, y, [stat]Block[] result
		Get the [stat]Block[] at a position.
		Can be used with [violet]build[].
		Cannot be printed, it will serialize as "[[content]".

	[violet]within[] [stat]double[] x, y, radius, [stat]boolean[] result
		Sets result to whether a unit is in the specified circle.

[royal]uradar[] [stat]Target[] a, b, c, [stay]bool[] order, [stat]Sort[] sort, [stat]Healthc[] result
	Like [royal]radar[], but on all units in the unit register.
	Searches until a suitable target is found.

[royal]ulocate
	Uses units to find a block type.
	Meant to be used to find blocks that are out of range for the unit.
	[coral]Found[] is only set to true if [coral]outX[] and [coral]outY[] point to the desired block.

	[violet]ore[] [stat]Item[] ore, [stat]double[] outX, outY, [stat]boolean[] found
		Looks for an ore with an itemDrop of [coral]ore[].
		Use [stat]@sand[] to find sand/dark sand, [stat]@copper[] to find copper, etc.

	[violet]building[] [stat]BlockFlag[] type, [stat]boolean[] enemy, [stat]double[] outX, outY, [stat]boolean[] found
		Looks for a building with certain pathfinder block flags.
		If [coral]enemy[] is true, derelict blocks cannot be located.

	[violet]spawn[] [stat]double[] outX, outY, [stat]boolean[] found
		Find an enemy spawn.

[royal]noop
	Does absolutely nothing.
	Use to sleep for a cycle, each processor supports more cycles per tick.
	Fallback instruction if parsing fails.
	Graphically represented by the [stat]Invalid[] block.

# Version
This manual page was written for BE 10266.
Newer versions may differ.
